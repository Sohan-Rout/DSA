{
  "javascript": "class Node {\n  constructor(data) {\n    this.data = data;\n    this.next = null;\n  }\n}\n\nfunction mergeLists(l1, l2) {\n  const dummy = new Node(0);\n  let current = dummy;\n\n  while (l1 && l2) {\n    if (l1.data < l2.data) {\n      current.next = l1;\n      l1 = l1.next;\n    } else {\n      current.next = l2;\n      l2 = l2.next;\n    }\n    current = current.next;\n  }\n\n  current.next = l1 || l2;\n  return dummy.next;\n}",
  "python": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\ndef merge_lists(l1, l2):\n    dummy = Node(0)\n    current = dummy\n\n    while l1 and l2:\n        if l1.data < l2.data:\n            current.next = l1\n            l1 = l1.next\n        else:\n            current.next = l2\n            l2 = l2.next\n        current = current.next\n\n    current.next = l1 or l2\n    return dummy.next",
  "java": "class Node {\n    int data;\n    Node next;\n    Node(int data) {\n        this.data = data;\n        this.next = null;\n    }\n}\n\npublic class MergeLists {\n    public static Node merge(Node l1, Node l2) {\n        Node dummy = new Node(0);\n        Node current = dummy;\n\n        while (l1 != null && l2 != null) {\n            if (l1.data < l2.data) {\n                current.next = l1;\n                l1 = l1.next;\n            } else {\n                current.next = l2;\n                l2 = l2.next;\n            }\n            current = current.next;\n        }\n\n        current.next = (l1 != null) ? l1 : l2;\n        return dummy.next;\n    }\n}",
  "c": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct Node {\n    int data;\n    struct Node* next;\n} Node;\n\nNode* mergeLists(Node* l1, Node* l2) {\n    Node dummy;\n    Node* current = &dummy;\n    dummy.next = NULL;\n\n    while (l1 && l2) {\n        if (l1->data < l2->data) {\n            current->next = l1;\n            l1 = l1->next;\n        } else {\n            current->next = l2;\n            l2 = l2->next;\n        }\n        current = current->next;\n    }\n\n    current->next = l1 ? l1 : l2;\n    return dummy.next;\n}",
  "cpp": "#include <iostream>\nusing namespace std;\n\nclass Node {\npublic:\n    int data;\n    Node* next;\n    Node(int d) : data(d), next(nullptr) {}\n};\n\nNode* mergeLists(Node* l1, Node* l2) {\n    Node dummy(0);\n    Node* current = &dummy;\n\n    while (l1 && l2) {\n        if (l1->data < l2->data) {\n            current->next = l1;\n            l1 = l1->next;\n        } else {\n            current->next = l2;\n            l2 = l2->next;\n        }\n        current = current->next;\n    }\n\n    current->next = l1 ? l1 : l2;\n    return dummy.next;\n}"
}