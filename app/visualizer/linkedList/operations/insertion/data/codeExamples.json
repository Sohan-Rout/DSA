{
  "javascript": "class Node {\n  constructor(data) {\n    this.data = data;\n    this.next = null;\n  }\n}\n\nclass SinglyLinkedList {\n  constructor() {\n    this.head = null;\n    this.size = 0;\n  }\n\n  // 1. Insert at beginning\n  insertFirst(data) {\n    const newNode = new Node(data);\n    newNode.next = this.head;\n    this.head = newNode;\n    this.size++;\n  }\n\n  // 2. Insert at end\n  insertLast(data) {\n    const newNode = new Node(data);\n    \n    if (!this.head) {\n      this.head = newNode;\n    } else {\n      let current = this.head;\n      while (current.next) {\n        current = current.next;\n      }\n      current.next = newNode;\n    }\n    this.size++;\n  }\n\n  // 3. Insert at specific index\n  insertAt(data, index) {\n    if (index < 0 || index > this.size) {\n      console.log(\"Invalid index\");\n      return;\n    }\n    \n    if (index === 0) {\n      this.insertFirst(data);\n      return;\n    }\n    \n    const newNode = new Node(data);\n    let current = this.head;\n    let count = 0;\n    \n    while (count < index - 1) {\n      current = current.next;\n      count++;\n    }\n    \n    newNode.next = current.next;\n    current.next = newNode;\n    this.size++;\n  }\n\n  printList() {\n    let current = this.head;\n    let result = \"\";\n    while (current) {\n      result += current.data + \" -> \";\n      current = current.next;\n    }\n    result += \"null\";\n    console.log(result);\n  }\n}\n\nconst sll = new SinglyLinkedList();\nsll.insertFirst(100);\nsll.insertFirst(200);\nsll.insertLast(300);\nsll.insertAt(500, 1);\nsll.printList();",
  "python": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass SinglyLinkedList:\n    def __init__(self):\n        self.head = None\n        self.size = 0\n    \n    # 1. Insert at beginning\n    def insert_first(self, data):\n        new_node = Node(data)\n        new_node.next = self.head\n        self.head = new_node\n        self.size += 1\n    \n    # 2. Insert at end\n    def insert_last(self, data):\n        new_node = Node(data)\n        \n        if not self.head:\n            self.head = new_node\n        else:\n            current = self.head\n            while current.next:\n                current = current.next\n            current.next = new_node\n        self.size += 1\n    \n    # 3. Insert at specific index\n    def insert_at(self, data, index):\n        if index < 0 or index > self.size:\n            print(\"Invalid index\")\n            return\n        \n        if index == 0:\n            self.insert_first(data)\n            return\n        \n        new_node = Node(data)\n        current = self.head\n        count = 0\n        \n        # Traverse to the node before the insertion point\n        while count < index - 1:\n            current = current.next\n            count += 1\n        \n        new_node.next = current.next\n        current.next = new_node\n        self.size += 1\n    \n    # Print the list\n    def print_list(self):\n        current = self.head\n        result = []\n        while current:\n            result.append(str(current.data))\n            current = current.next\n        print(\" -> \".join(result) + \" -> None\")\n\n# Usage Example\nsll = SinglyLinkedList()\nsll.insert_first(100)  # List: 100 -> None\nsll.insert_first(200)  # List: 200 -> 100 -> None\nsll.insert_last(300)   # List: 200 -> 100 -> 300 -> None\nsll.insert_at(500, 1)  # List: 200 -> 500 -> 100 -> 300 -> None\nsll.print_list()",
  "java": "public class SinglyLinkedList {\n    private class Node {\n        int data;\n        Node next;\n        \n        Node(int data) {\n            this.data = data;\n            this.next = null;\n        }\n    }\n    \n    private Node head;\n    private int size;\n    \n    public SinglyLinkedList() {\n        head = null;\n        size = 0;\n    }\n    \n    // 1. Insert at beginning\n    public void insertFirst(int data) {\n        Node newNode = new Node(data);\n        newNode.next = head;\n        head = newNode;\n        size++;\n    }\n    \n    // 2. Insert at end\n    public void insertLast(int data) {\n        Node newNode = new Node(data);\n        \n        if (head == null) {\n            head = newNode;\n        } else {\n            Node current = head;\n            while (current.next != null) {\n                current = current.next;\n            }\n            current.next = newNode;\n        }\n        size++;\n    }\n    \n    // 3. Insert at specific index\n    public void insertAt(int data, int index) {\n        if (index < 0 || index > size) {\n            System.out.println(\"Invalid index\");\n            return;\n        }\n        \n        if (index == 0) {\n            insertFirst(data);\n            return;\n        }\n        \n        Node newNode = new Node(data);\n        Node current = head;\n        int count = 0;\n        \n        // Traverse to the node before the insertion point\n        while (count < index - 1) {\n            current = current.next;\n            count++;\n        }\n        \n        newNode.next = current.next;\n        current.next = newNode;\n        size++;\n    }\n    \n    // Print the list\n    public void printList() {\n        Node current = head;\n        while (current != null) {\n            System.out.print(current.data + \" -> \");\n            current = current.next;\n        }\n        System.out.println(\"null\");\n    }\n    \n    // Usage Example\n    public static void main(String[] args) {\n        SinglyLinkedList sll = new SinglyLinkedList();\n        sll.insertFirst(100);  // List: 100 -> null\n        sll.insertFirst(200);  // List: 200 -> 100 -> null\n        sll.insertLast(300);   // List: 200 -> 100 -> 300 -> null\n        sll.insertAt(500, 1);  // List: 200 -> 500 -> 100 -> 300 -> null\n        sll.printList();\n    }\n}",
  "c": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct Node {\n    int data;\n    struct Node* next;\n} Node;\n\ntypedef struct {\n    Node* head;\n    int size;\n} SinglyLinkedList;\n\nvoid initList(SinglyLinkedList* list) {\n    list->head = NULL;\n    list->size = 0;\n}\n\n// 1. Insert at beginning\nvoid insertFirst(SinglyLinkedList* list, int data) {\n    Node* newNode = (Node*)malloc(sizeof(Node));\n    newNode->data = data;\n    newNode->next = list->head;\n    list->head = newNode;\n    list->size++;\n}\n\n// 2. Insert at end\nvoid insertLast(SinglyLinkedList* list, int data) {\n    Node* newNode = (Node*)malloc(sizeof(Node));\n    newNode->data = data;\n    newNode->next = NULL;\n    \n    if (list->head == NULL) {\n        list->head = newNode;\n    } else {\n        Node* current = list->head;\n        while (current->next != NULL) {\n            current = current->next;\n        }\n        current->next = newNode;\n    }\n    list->size++;\n}\n\n// 3. Insert at specific index\nvoid insertAt(SinglyLinkedList* list, int data, int index) {\n    if (index < 0 || index > list->size) {\n        printf(\"Invalid index\\n\");\n        return;\n    }\n    \n    if (index == 0) {\n        insertFirst(list, data);\n        return;\n    }\n    \n    Node* newNode = (Node*)malloc(sizeof(Node));\n    newNode->data = data;\n    \n    Node* current = list->head;\n    int count = 0;\n    \n    // Traverse to the node before the insertion point\n    while (count < index - 1) {\n        current = current->next;\n        count++;\n    }\n    \n    newNode->next = current->next;\n    current->next = newNode;\n    list->size++;\n}\n\n// Print the list\nvoid printList(SinglyLinkedList* list) {\n    Node* current = list->head;\n    while (current != NULL) {\n        printf(\"%d -> \", current->data);\n        current = current->next;\n    }\n    printf(\"NULL\\n\");\n}\n\n// Usage Example\nint main() {\n    SinglyLinkedList list;\n    initList(&list);\n    \n    insertFirst(&list, 100);  // List: 100 -> NULL\n    insertFirst(&list, 200);  // List: 200 -> 100 -> NULL\n    insertLast(&list, 300);   // List: 200 -> 100 -> 300 -> NULL\n    insertAt(&list, 500, 1);  // List: 200 -> 500 -> 100 -> 300 -> NULL\n    printList(&list);\n    \n    return 0;\n}",
  "cpp": "#include <iostream>\nusing namespace std;\n\nclass Node {\npublic:\n    int data;\n    Node* next;\n    \n    Node(int data) : data(data), next(nullptr) {}\n};\n\nclass SinglyLinkedList {\nprivate:\n    Node* head;\n    int size;\n    \npublic:\n    SinglyLinkedList() : head(nullptr), size(0) {}\n    \n    // 1. Insert at beginning\n    void insertFirst(int data) {\n        Node* newNode = new Node(data);\n        newNode->next = head;\n        head = newNode;\n        size++;\n    }\n    \n    // 2. Insert at end\n    void insertLast(int data) {\n        Node* newNode = new Node(data);\n        \n        if (head == nullptr) {\n            head = newNode;\n        } else {\n            Node* current = head;\n            while (current->next != nullptr) {\n                current = current->next;\n            }\n            current->next = newNode;\n        }\n        size++;\n    }\n    \n    // 3. Insert at specific index\n    void insertAt(int data, int index) {\n        if (index < 0 || index > size) {\n            cout << \"Invalid index\" << endl;\n            return;\n        }\n        \n        if (index == 0) {\n            insertFirst(data);\n            return;\n        }\n        \n        Node* newNode = new Node(data);\n        Node* current = head;\n        int count = 0;\n        \n        // Traverse to the node before the insertion point\n        while (count < index - 1) {\n            current = current->next;\n            count++;\n        }\n        \n        newNode->next = current->next;\n        current->next = newNode;\n        size++;\n    }\n    \n    // Print the list\n    void printList() {\n        Node* current = head;\n        while (current != nullptr) {\n            cout << current->data << \" -> \";\n            current = current->next;\n        }\n        cout << \"NULL\" << endl;\n    }\n};\n\n// Usage Example\nint main() {\n    SinglyLinkedList sll;\n    sll.insertFirst(100);  // List: 100 -> NULL\n    sll.insertFirst(200);  // List: 200 -> 100 -> NULL\n    sll.insertLast(300);   // List: 200 -> 100 -> 300 -> NULL\n    sll.insertAt(500, 1);  // List: 200 -> 500 -> 100 -> 300 -> NULL\n    sll.printList();\n    \n    return 0;\n}"
}