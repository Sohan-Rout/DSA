{
  "javascript": "class SinglyLinkedList {\n  // 1. Delete first node\n  deleteFirst() {\n    if (!this.head) return null;\n    \n    const deletedNode = this.head;\n    this.head = this.head.next;\n    this.size--;\n    return deletedNode.data;\n  }\n\n  // 2. Delete last node\n  deleteLast() {\n    if (!this.head) return null;\n    \n    if (!this.head.next) {\n      const data = this.head.data;\n      this.head = null;\n      this.size--;\n      return data;\n    }\n    \n    let current = this.head;\n    while (current.next.next) {\n      current = current.next;\n    }\n    \n    const data = current.next.data;\n    current.next = null;\n    this.size--;\n    return data;\n  }\n\n  // 3. Delete at specific index\n  deleteAt(index) {\n    if (index < 0 || index >= this.size) return null;\n    if (index === 0) return this.deleteFirst();\n    \n    let current = this.head;\n    for (let i = 0; i < index - 1; i++) {\n      current = current.next;\n    }\n    \n    const deletedNode = current.next;\n    current.next = deletedNode.next;\n    this.size--;\n    return deletedNode.data;\n  }\n\n  // 4. Delete by value (first occurrence)\n  deleteValue(value) {\n    if (!this.head) return null;\n    \n    if (this.head.data === value) {\n      return this.deleteFirst();\n    }\n    \n    let current = this.head;\n    while (current.next && current.next.data !== value) {\n      current = current.next;\n    }\n    \n    if (!current.next) return null;\n    \n    const deletedNode = current.next;\n    current.next = deletedNode.next;\n    this.size--;\n    return deletedNode.data;\n  }\n}",
  "python": "class SinglyLinkedList:\n    # 1. Delete first node\n    def delete_first(self):\n        if not self.head:\n            return None\n            \n        deleted_node = self.head\n        self.head = self.head.next\n        self.size -= 1\n        return deleted_node.data\n    \n    # 2. Delete last node\n    def delete_last(self):\n        if not self.head:\n            return None\n            \n        if not self.head.next:\n            data = self.head.data\n            self.head = None\n            self.size -= 1\n            return data\n            \n        current = self.head\n        while current.next.next:\n            current = current.next\n            \n        data = current.next.data\n        current.next = None\n        self.size -= 1\n        return data\n    \n    # 3. Delete at specific index\n    def delete_at(self, index):\n        if index < 0 or index >= self.size:\n            return None\n        if index == 0:\n            return self.delete_first()\n            \n        current = self.head\n        for _ in range(index - 1):\n            current = current.next\n            \n        deleted_node = current.next\n        current.next = deleted_node.next\n        self.size -= 1\n        return deleted_node.data\n    \n    # 4. Delete by value (first occurrence)\n    def delete_value(self, value):\n        if not self.head:\n            return None\n            \n        if self.head.data == value:\n            return self.delete_first()\n            \n        current = self.head\n        while current.next and current.next.data != value:\n            current = current.next\n            \n        if not current.next:\n            return None\n            \n        deleted_node = current.next\n        current.next = deleted_node.next\n        self.size -= 1\n        return deleted_node.data",
  "java": "public class SinglyLinkedList {\n    // 1. Delete first node\n    public Integer deleteFirst() {\n        if (head == null) return null;\n        \n        int data = head.data;\n        head = head.next;\n        size--;\n        return data;\n    }\n    \n    // 2. Delete last node\n    public Integer deleteLast() {\n        if (head == null) return null;\n        \n        if (head.next == null) {\n            int data = head.data;\n            head = null;\n            size--;\n            return data;\n        }\n        \n        Node current = head;\n        while (current.next.next != null) {\n            current = current.next;\n        }\n        \n        int data = current.next.data;\n        current.next = null;\n        size--;\n        return data;\n    }\n    \n    // 3. Delete at specific index\n    public Integer deleteAt(int index) {\n        if (index < 0 || index >= size) return null;\n        if (index == 0) return deleteFirst();\n        \n        Node current = head;\n        for (int i = 0; i < index - 1; i++) {\n            current = current.next;\n        }\n        \n        int data = current.next.data;\n        current.next = current.next.next;\n        size--;\n        return data;\n    }\n    \n    // 4. Delete by value (first occurrence)\n    public Integer deleteValue(int value) {\n        if (head == null) return null;\n        \n        if (head.data == value) {\n            return deleteFirst();\n        }\n        \n        Node current = head;\n        while (current.next != null && current.next.data != value) {\n            current = current.next;\n        }\n        \n        if (current.next == null) return null;\n        \n        int data = current.next.data;\n        current.next = current.next.next;\n        size--;\n        return data;\n    }\n    \n    // Usage Example\n    public static void main(String[] args) {\n        SinglyLinkedList sll = new SinglyLinkedList();\n        // Example of the insertion for insertion refer insertion article\n        sll.insertLast(100);\n        sll.insertLast(200);\n        sll.insertLast(300);\n        sll.insertLast(400);\n        \n        System.out.println(sll.deleteFirst());  // 100\n        System.out.println(sll.deleteLast());   // 400\n        System.out.println(sll.deleteAt(1));    // 300\n        System.out.println(sll.deleteValue(200)); // 200\n    }\n}",
  "c": "int deleteFirst(SinglyLinkedList* list) {\n    if (list->head == NULL) return -1;\n    \n    Node* temp = list->head;\n    int data = temp->data;\n    list->head = list->head->next;\n    free(temp);\n    list->size--;\n    return data;\n}\n\n// 2. Delete last node\nint deleteLast(SinglyLinkedList* list) {\n    if (list->head == NULL) return -1;\n    \n    if (list->head->next == NULL) {\n        int data = list->head->data;\n        free(list->head);\n        list->head = NULL;\n        list->size--;\n        return data;\n    }\n    \n    Node* current = list->head;\n    while (current->next->next != NULL) {\n        current = current->next;\n    }\n    \n    int data = current->next->data;\n    free(current->next);\n    current->next = NULL;\n    list->size--;\n    return data;\n}\n\n// 3. Delete at specific index\nint deleteAt(SinglyLinkedList* list, int index) {\n    if (index < 0 || index >= list->size) return -1;\n    if (index == 0) return deleteFirst(list);\n    \n    Node* current = list->head;\n    for (int i = 0; i < index - 1; i++) {\n        current = current->next;\n    }\n    \n    Node* temp = current->next;\n    int data = temp->data;\n    current->next = temp->next;\n    free(temp);\n    list->size--;\n    return data;\n}\n\n// 4. Delete by value (first occurrence)\nint deleteValue(SinglyLinkedList* list, int value) {\n    if (list->head == NULL) return -1;\n    \n    if (list->head->data == value) {\n        return deleteFirst(list);\n    }\n    \n    Node* current = list->head;\n    while (current->next != NULL && current->next->data != value) {\n        current = current->next;\n    }\n    \n    if (current->next == NULL) return -1;\n    \n    Node* temp = current->next;\n    int data = temp->data;\n    current->next = temp->next;\n    free(temp);\n    list->size--;\n    return data;\n}",
  "cpp": "public:\n    // 1. Delete first node\n    int deleteFirst() {\n        if (!head) throw std::out_of_range(\"List is empty\");\n        \n        Node* temp = head;\n        int data = temp->data;\n        head = head->next;\n        delete temp;\n        size--;\n        return data;\n    }\n    \n    // 2. Delete last node\n    int deleteLast() {\n        if (!head) throw std::out_of_range(\"List is empty\");\n        \n        if (!head->next) {\n            int data = head->data;\n            delete head;\n            head = nullptr;\n            size--;\n            return data;\n        }\n        \n        Node* current = head;\n        while (current->next->next) {\n            current = current->next;\n        }\n        \n        int data = current->next->data;\n        delete current->next;\n        current->next = nullptr;\n        size--;\n        return data;\n    }\n    \n    // 3. Delete at specific index\n    int deleteAt(int index) {\n        if (index < 0 || index >= size) throw std::out_of_range(\"Index out of range\");\n        if (index == 0) return deleteFirst();\n        \n        Node* current = head;\n        for (int i = 0; i < index - 1; i++) {\n            current = current->next;\n        }\n        \n        Node* temp = current->next;\n        int data = temp->data;\n        current->next = temp->next;\n        delete temp;\n        size--;\n        return data;\n    }\n    \n    // 4. Delete by value (first occurrence)\n    int deleteValue(int value) {\n        if (!head) throw std::out_of_range(\"List is empty\");\n        \n        if (head->data == value) {\n            return deleteFirst();\n        }\n        \n        Node* current = head;\n        while (current->next && current->next->data != value) {\n            current = current->next;\n        }\n        \n        if (!current->next) throw std::out_of_range(\"Value not found\");\n        \n        Node* temp = current->next;\n        int data = temp->data;\n        current->next = temp->next;\n        delete temp;\n        size--;\n        return data;\n    }\n};"
}