{
  "javascript": "class Node {\n  constructor(data) {\n    this.data = data;\n    this.next = null;\n  }\n}\n\nfunction traverse(head) {\n  let current = head;\n  while (current) {\n    console.log(current.data);\n    current = current.next;\n  }\n}\n\nlet head = new Node(1);\nhead.next = new Node(2);\nhead.next.next = new Node(3);\ntraverse(head);",
  "python": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\ndef traverse(head):\n    current = head\n    while current:\n        print(current.data)\n        current = current.next\n\nhead = Node(1)\nhead.next = Node(2)\nhead.next.next = Node(3)\ntraverse(head)",
  "java": "class Node {\n    int data;\n    Node next;\n    Node(int data) {\n        this.data = data;\n        this.next = null;\n    }\n}\n\npublic class Main {\n    public static void traverse(Node head) {\n        Node current = head;\n        while (current != null) {\n            System.out.println(current.data);\n            current = current.next;\n        }\n    }\n\n    public static void main(String[] args) {\n        Node head = new Node(1);\n        head.next = new Node(2);\n        head.next.next = new Node(3);\n        traverse(head);\n    }\n}",
  "c": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int data;\n    struct Node* next;\n};\n\nvoid traverse(struct Node* head) {\n    struct Node* current = head;\n    while (current != NULL) {\n        printf(\"%d\\n\", current->data);\n        current = current->next;\n    }\n}\n\nint main() {\n    struct node * head = (struct node *)malloc(sizeof(struct node));\n    struct node * second = (struct node *)malloc(sizeof(struct node));\n    struct node * third = (struct node *)malloc(sizeof(struct node));\n\n    head->data = 1;\n    head->next = second;\n    second->data = 2;\n    second->next = third;\n    third->data = 3;\n    third->next = NULL;\n\n    traverse(head);\n\n    return 0;\n}",
  "cpp": "#include <iostream>\nusing namespace std;\n\nclass Node {\npublic:\n    int data;\n    Node* next;\n    Node(int data) : data(data), next(nullptr) {}\n};\n\nvoid traverse(Node* head) {\n    Node* current = head;\n    while (current != nullptr) {\n        cout << current->data << endl;\n        current = current->next;\n    }\n}\n\nint main() {\n    Node* head = new Node(1);\n    head->next = new Node(2);\n    head->next->next = new Node(3);\n    traverse(head);\n\n    // Free memory\n    Node* temp;\n    while (head != nullptr) {\n        temp = head;\n        head = head->next;\n        delete temp;\n    }\n\n    return 0;\n}"
}